{"version":3,"file":"static/js/757.597fa724.chunk.js","mappings":"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","sources":["components/molecules/dashboard-map.js","components/organisms/guest/guest-dashboard.js","utils/hooks/useApiCall.js"],"sourcesContent":["import React, { Suspense, useEffect } from 'react';\r\nimport L from 'leaflet';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\r\nimport { centroid } from 'turf/index';\r\nimport geojsonData from '../../assets/am.json';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst ProvinceLabels = React.memo(({ data, marzData }) => {\r\n  const map = useMap();\r\n  const markers = React.useRef([]);\r\n\r\n  useEffect(() => {\r\n    data.features.forEach(feature => {\r\n      const center = centroid(feature);\r\n      const [lng, lat] = center.geometry.coordinates;\r\n\r\n      const marker = L.marker([lat, lng], {\r\n        icon: L.divIcon({\r\n          className: 'province-label',\r\n          html: `<div style=\"font-size:12px; color:blue; white-space: nowrap;\">${\r\n            feature.properties.name\r\n          }</div>\r\n        ${\r\n          marzData?.[feature.properties.name]\r\n            ? `<div style=\"font-size:12px; color:red; white-space: nowrap;\"> ${Math.round(\r\n                marzData?.[feature.properties.name].dataWaterDischargeQuantity\r\n              )} k m³/yr</div>\r\n              <div style=\"font-size:12px; color:green; white-space: nowrap;\"> ${Math.round(\r\n                marzData?.[feature.properties.name].dataWaterIntakeQuantity\r\n              )} k m³/yr</div>\r\n               <div style=\"font-size:12px; color:black; white-space: nowrap;\"> ${Math.round(\r\n                 marzData?.[feature.properties.name].dataResourcesWaterSourcesLength\r\n               )}</div>\r\n              `\r\n            : ''\r\n        }`,\r\n        }),\r\n      }).addTo(map);\r\n\r\n      markers.current.push(marker);\r\n    });\r\n    return () => {\r\n      markers.current.forEach(marker => map.removeLayer(marker));\r\n      markers.current = [];\r\n    };\r\n  }, [data, marzData, map]);\r\n\r\n  return null;\r\n});\r\n\r\nconst DashboardMap = ({ separatedDataPerMarz }) => {\r\n  useEffect(() => {\r\n    return () => {\r\n      const m = L.DomUtil.get('map');\r\n      if (m) {\r\n        // eslint-disable-next-line no-underscore-dangle\r\n        m._leaflet_id = null;\r\n      }\r\n    };\r\n  }, []);\r\n  return (\r\n    <MapContainer\r\n      center={[40.1792, 44.4991]}\r\n      zoom={8}\r\n      style={{ height: '600px', width: '100%' }}\r\n      key='stable-map-key'\r\n    >\r\n      <Suspense>\r\n        <TileLayer\r\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        <GeoJSON\r\n          data={geojsonData}\r\n          style={{\r\n            color: '#3388ff',\r\n            weight: 2,\r\n            fillOpacity: 0.2,\r\n          }}\r\n        />\r\n        <ProvinceLabels data={geojsonData} marzData={separatedDataPerMarz} />\r\n      </Suspense>\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default DashboardMap;\r\n","/* eslint-disable no-underscore-dangle */\r\n/* eslint-disable import/no-extraneous-dependencies */\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  getBmo,\r\n  getDataWaterDischarge,\r\n  getDataWaterIntake,\r\n  getIntakeDischargePoints,\r\n  getMarz,\r\n  getPermits,\r\n} from 'services/apis/marz';\r\nimport useApiCall from 'utils/hooks/useApiCall';\r\nimport { Typography } from 'antd';\r\nimport { Spin } from 'antd/lib/index';\r\nimport { Col, DatePicker, Divider, Paragraph, Row } from 'components/atoms/index';\r\nimport Button from 'components/atoms/Button/index';\r\nimport { Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport moment from 'moment';\r\nimport DashboardMap from 'components/molecules/dashboard-map';\r\nimport DashboardCharts from 'components/molecules/dashbaord-charts';\r\nimport placesNames from '../../../data/places-names.json';\r\nimport bmoData from '../../../data/bmo-data.json';\r\nimport marzData from '../../../data/marz-data.json';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst totalQuantity = data => {\r\n  return data.reduce((acc, item) => acc + item.totalQuantity, 0);\r\n};\r\nconst listOfNames = data => {\r\n  return [...new Set(data.map(el => el.waterSource))];\r\n};\r\nconst totalKeyCount = (data, key, name) => {\r\n  return data.filter(el => el?.[key] === name).length;\r\n};\r\n\r\nconst engMarz = {\r\n  Արագածոտն: 'Aragatsotn',\r\n  Արարատ: 'Ararat',\r\n  Արմավիր: 'Armavir',\r\n  Գեղարքունիք: 'Gegharkunik',\r\n  Երևան: 'Erevan',\r\n  Լոռի: 'Lori',\r\n  Կոտայք: 'Kotayk',\r\n  Շիրակ: 'Shirak',\r\n  Սյունիք: 'Syunik',\r\n  'Վայոց ձոր': 'Vayots Dzor',\r\n  Տավուշ: 'Tavush',\r\n};\r\n\r\nconst engBMO = {\r\n  Ախուրյան: 'Akhuryan',\r\n  Արարատյան: 'Araratyan',\r\n  Հարավային: 'Southern',\r\n  Հյուսիսային: 'Northern',\r\n  Հրազդան: 'Hrazdan',\r\n  Սևան: 'Sevan',\r\n};\r\n\r\nconst engBMOValues = Object.values(engBMO);\r\n\r\nconst CustomTooltip = ({ payload, detailedSource = true }) => {\r\n  return (\r\n    <div>\r\n      <div className='ant-popover-arrow' />\r\n      <div>\r\n        <b>{payload?.[0]?.payload?.name}</b>\r\n        <span>\r\n          <p className='desc'>\r\n            <small>{payload?.[0]?.payload?.value}</small>\r\n            {detailedSource && ' k m³/yr`'}\r\n          </p>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GuestDashboard = () => {\r\n  const [marz, , marzCall, , , setMarz] = useApiCall(getMarz);\r\n  const [, , permitsCall] = useApiCall(getPermits);\r\n  const [, , intakeDischargePointsCall] = useApiCall(getIntakeDischargePoints);\r\n  const [, , dataWaterIntakeCall] = useApiCall(getDataWaterIntake);\r\n  const [, , dataWaterDischargeCall] = useApiCall(getDataWaterDischarge);\r\n  const [bmo, , bmoCall, , , setBmo] = useApiCall(getBmo);\r\n  const [separatedDataPerBMO, setSeparatedDataPerBMO] = useState({});\r\n  const [globalBmoData, setGlobalBmoData] = useState({});\r\n  const [separatedDataPerMarz, setSeparatedDataPerMarz] = useState({});\r\n  const [year, setYear] = useState('2024');\r\n  const [charLoading, setCharLoading] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [notConnected, setNotConnected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    bmoCall(\r\n      {},\r\n      () => {},\r\n      () => {\r\n        setNotConnected(true);\r\n        setMarz(placesNames.marz);\r\n        setBmo(placesNames.bmo);\r\n      }\r\n    );\r\n    marzCall();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (bmo?.length && !notConnected) {\r\n      for (let i = 0; i < bmo.length; i += 1) {\r\n        setLoading(true);\r\n        const allLoaded = {\r\n          permitsCall: false,\r\n          intakeDischargePointsCall: false,\r\n          dataWaterIntakeCall: false,\r\n          dataWaterDischargeCall: false,\r\n        };\r\n        permitsCall({ bmoid: bmo[i].internal_id, year }, data => {\r\n          setSeparatedDataPerBMO(prev => ({\r\n            ...prev,\r\n            [engBMO[bmo[i].name]]: { ...(prev?.[engBMO[bmo[i].name]] || {}), permits: data },\r\n          }));\r\n          allLoaded.permitsCall = true;\r\n          if (Object.values(allLoaded).every(el => el === true)) {\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(true);\r\n          }\r\n        });\r\n        intakeDischargePointsCall({ bmoid: bmo[i].internal_id }, data => {\r\n          setSeparatedDataPerBMO(prev => ({\r\n            ...prev,\r\n            [engBMO[bmo[i].name]]: {\r\n              ...(prev?.[engBMO[bmo[i].name]] || {}),\r\n              intakeDischargePoints: data,\r\n            },\r\n          }));\r\n          allLoaded.intakeDischargePointsCall = true;\r\n          if (Object.values(allLoaded).every(el => el === true)) {\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(true);\r\n          }\r\n        });\r\n        dataWaterIntakeCall({ bmoid: bmo[i].internal_id, year }, data => {\r\n          setSeparatedDataPerBMO(prev => ({\r\n            ...prev,\r\n            [engBMO[bmo[i].name]]: {\r\n              ...(prev?.[engBMO[bmo[i].name]] || {}),\r\n              dataWaterIntake: data,\r\n            },\r\n          }));\r\n          allLoaded.dataWaterIntakeCall = true;\r\n          if (Object.values(allLoaded).every(el => el === true)) {\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(true);\r\n          }\r\n        });\r\n        dataWaterDischargeCall({ bmoid: bmo[i].internal_id, year }, data => {\r\n          setSeparatedDataPerBMO(prev => ({\r\n            ...prev,\r\n            [engBMO[bmo[i].name]]: {\r\n              ...(prev?.[engBMO[bmo[i].name]] || {}),\r\n              dataWaterDischarge: data,\r\n            },\r\n          }));\r\n          allLoaded.dataWaterDischargeCall = true;\r\n          if (Object.values(allLoaded).every(el => el === true)) {\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(true);\r\n          }\r\n        });\r\n      }\r\n    } else if (notConnected) {\r\n      setGlobalBmoData(bmoData[year]);\r\n      setSeparatedDataPerMarz(marzData[year]);\r\n    }\r\n  }, [bmo, year, notConnected]);\r\n\r\n  useEffect(() => {\r\n    const areAllFilled = Object.values(separatedDataPerBMO)\r\n      .map(el => Object.keys(el).length === 4)\r\n      .every(val => val === true);\r\n    if (\r\n      Object.keys(separatedDataPerBMO).length === bmo.length &&\r\n      areAllFilled &&\r\n      bmo.length > 0 &&\r\n      !notConnected\r\n    ) {\r\n      setGlobalBmoData(\r\n        Object.entries(separatedDataPerBMO).reduce(\r\n          (acc, [key, value]) => ({\r\n            ...acc,\r\n            [key]: {\r\n              dataWaterDischargeQuantity: totalQuantity(value.dataWaterDischarge || []),\r\n              dataWaterIntakeQuantity: totalQuantity(value?.dataWaterIntake || []),\r\n              dataResourcesWaterSources: listOfNames([\r\n                ...(value?.dataWaterDischarge || []),\r\n                ...(value?.dataWaterIntake || []),\r\n              ]),\r\n              dataResourcesWaterSourcesLength: listOfNames([\r\n                ...(value.dataWaterDischarge || []),\r\n                ...(value.dataWaterIntake || []),\r\n              ]).length,\r\n              TotalJrar: totalKeyCount(\r\n                value?.intakeDischargePoints || [],\r\n                'typeOfWaterUse',\r\n                'Ջրառ'\r\n              ),\r\n              TotalJrarHeracum: totalKeyCount(\r\n                value?.intakeDischargePoints || [],\r\n                'typeOfWaterUse',\r\n                'Ջրահեռացում'\r\n              ),\r\n              totalPermits: (value?.permits || []).length,\r\n            },\r\n          }),\r\n          {}\r\n        )\r\n      );\r\n      const allData = Object.values(separatedDataPerBMO).reduce(\r\n        (acc, value) => [\r\n          ...acc,\r\n          ...(value?.dataWaterDischarge\r\n            ? value.dataWaterDischarge.map(el => ({ ...el, dataWaterDischarge: true }))\r\n            : []),\r\n          ...(value?.dataWaterIntake\r\n            ? value.dataWaterIntake.map(el => ({ ...el, dataWaterIntake: true }))\r\n            : []),\r\n        ],\r\n        []\r\n      );\r\n      let createdMarzData = {};\r\n\r\n      for (let i = 0; i < marz.length; i += 1) {\r\n        createdMarzData = {\r\n          ...createdMarzData,\r\n          [engMarz[marz[i]?.name]]: allData.filter(\r\n            el => el?.marz_Internal_ID === marz[i]?.internal_id\r\n          ),\r\n        };\r\n      }\r\n\r\n      setSeparatedDataPerMarz(\r\n        Object.entries(createdMarzData).reduce(\r\n          (acc, [key, value]) => ({\r\n            ...acc,\r\n            [key]: {\r\n              dataWaterDischargeQuantity: totalQuantity(value.filter(el => el?.dataWaterDischarge)),\r\n              dataWaterIntakeQuantity: totalQuantity(value.filter(el => el?.dataWaterIntake)),\r\n              dataResourcesWaterSources: listOfNames(value),\r\n              dataResourcesWaterSourcesLength: listOfNames(value).length,\r\n            },\r\n          }),\r\n          {}\r\n        )\r\n      );\r\n    }\r\n  }, [separatedDataPerBMO]);\r\n\r\n  const exportData = (data, name) => {\r\n    const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\r\n    const link = document.createElement('a');\r\n    link.href = jsonString;\r\n    link.download = `${name}.json`;\r\n\r\n    link.click();\r\n  };\r\n\r\n  const disabledDate = current => {\r\n    return (\r\n      current && (current.isBefore(moment('2003-01-01')) || current.isAfter(moment('2024-12-31')))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Spin spinning={loading}>\r\n        <Title>Tim 2 Presentation of Data Research of cadaster API</Title>\r\n        <DatePicker\r\n          picker='year'\r\n          onChange={e => {\r\n            setYear(moment(e).format('YYYY'));\r\n            setSeparatedDataPerBMO({});\r\n            setGlobalBmoData({});\r\n            setSeparatedDataPerMarz({});\r\n          }}\r\n          defaultValue={moment(year, 'YYYY')}\r\n          width='200px'\r\n          mb={10}\r\n          disabledDate={disabledDate}\r\n        />\r\n        <Row gutter={[15, 32]}>\r\n          <Col span={24}>\r\n            <Title level={3}>MAP presentation of cadaster Data</Title>\r\n            <Col span={24} border_radius={'32px'} padding='16px 32px' back_color='rgb(229 229 220)'>\r\n              <Title level={5} style={{ color: 'red' }}>\r\n                In Red text in The Map you'll see Total Water Discharge Quantity per Marz\r\n              </Title>\r\n              <Title level={5} style={{ color: 'green' }}>\r\n                In Green text in The Map you'll see Total Water Intake Quantity per Marz\r\n              </Title>\r\n              <Title level={5} style={{ color: 'black' }}>\r\n                In Black text in The Map you'll see Total Water Sources Quantity per Marz\r\n              </Title>\r\n              <DashboardMap separatedDataPerMarz={separatedDataPerMarz} />\r\n              <Button\r\n                onClick={() => exportData(separatedDataPerMarz, 'marz')}\r\n                margin={'32px 0 0 0'}\r\n              >\r\n                Export Data\r\n              </Button>\r\n            </Col>\r\n          </Col>\r\n          <Col span={24}>\r\n            <Title level={3}>\r\n              Data presentation per Marz and BMO <b>please Hover the Charts for Data</b>\r\n            </Title>\r\n            <Col span={24} border_radius={'32px'} padding='16px 32px' back_color='rgb(229 229 220)'>\r\n              <Spin spinning={charLoading}>\r\n                <DashboardCharts\r\n                  {...{\r\n                    engBMO,\r\n                    setCharLoading,\r\n                    bmo,\r\n                    exportData,\r\n                    engBMOValues,\r\n                    disabledDate,\r\n                    notConnected,\r\n                  }}\r\n                />\r\n              </Spin>\r\n            </Col>\r\n          </Col>\r\n          <Col span={24}>\r\n            <Title level={3}>\r\n              Data presentation per Marz and BMO <b>please Hover the Charts for Data</b>\r\n            </Title>\r\n            <Col span={24} border_radius={'32px'} padding='16px 32px' back_color='rgb(229 229 220)'>\r\n              <Row gutter={[16, 16]}>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents Marzs and BMOs Water Discharge Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataWaterDischargeQuantity),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                      <Pie\r\n                        data={Object.entries(separatedDataPerMarz).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataWaterDischargeQuantity),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        innerRadius={70}\r\n                        outerRadius={90}\r\n                        fill='#82ca9d'\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents Marzs and BMOs Water Intake Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataWaterIntakeQuantity),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                      <Pie\r\n                        data={Object.entries(separatedDataPerMarz).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataWaterIntakeQuantity),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        innerRadius={70}\r\n                        outerRadius={90}\r\n                        fill='#82ca9d'\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents Marzs and BMOs Water Sources Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataResourcesWaterSourcesLength),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip\r\n                        content={<CustomTooltip detailedSource={false} />}\r\n                        detailedSource={false}\r\n                      />\r\n                      <Pie\r\n                        data={Object.entries(separatedDataPerMarz).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.dataResourcesWaterSourcesLength),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        innerRadius={70}\r\n                        outerRadius={90}\r\n                        fill='#82ca9d'\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents BMOs Water Consumption Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.TotalJrar),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents BMOs removing the water intake Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.TotalJrarHeracum),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip content={<CustomTooltip />} />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24} lg={12}>\r\n                  <Title level={4}>Pie represents BMOs permits Quantity</Title>\r\n                  <ResponsiveContainer width='100%' height={200}>\r\n                    <PieChart width='100%' height={200}>\r\n                      <Pie\r\n                        data={Object.entries(globalBmoData).map(([key, value]) => ({\r\n                          name: key,\r\n                          value: Math.round(value.totalPermits),\r\n                        }))}\r\n                        dataKey='value'\r\n                        cx='50%'\r\n                        cy='50%'\r\n                        outerRadius={60}\r\n                        fill='#8884d8'\r\n                      />\r\n                      <Tooltip\r\n                        content={<CustomTooltip detailedSource={false} />}\r\n                        detailedSource={false}\r\n                      />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Title level={4}>All Water Resources Names</Title>\r\n                  <Col span={24} padding={0} mb={0}>\r\n                    <Row gutter={0} align='middle'>\r\n                      <Col span={8}>\r\n                        <Divider margin={'0px !important'} />\r\n                      </Col>\r\n                      <Col justify='center' span={8}>\r\n                        <Paragraph fw={700} mb={0}>\r\n                          Per BMO\r\n                        </Paragraph>\r\n                      </Col>\r\n                      <Col span={8}>\r\n                        <Divider margin={'0px !important'} />\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  {Object.entries(globalBmoData).length\r\n                    ? Object.entries(globalBmoData).map(([key, value]) => (\r\n                        <div style={{ marginTop: 5 }} key={key}>\r\n                          <Paragraph\r\n                            width='100%'\r\n                            back_color={'rgb(136, 132, 216)'}\r\n                            align='center'\r\n                            padding='5px'\r\n                            color='white'\r\n                            radius='15px'\r\n                            mb={5}\r\n                          >\r\n                            {key}\r\n                          </Paragraph>\r\n                          <p\r\n                            style={{\r\n                              display: 'inline',\r\n                              whiteSpace: 'normal',\r\n                              overflowWrap: 'break-word',\r\n                            }}\r\n                          >\r\n                            {`${Object.entries(value)\r\n                              .filter(([k]) => k === 'dataResourcesWaterSources')\r\n                              .map(([, el]) => el)\r\n                              .join(',')}`}\r\n                          </p>\r\n                        </div>\r\n                      ))\r\n                    : ''}\r\n                  <Col span={24} padding={0} mb={0}>\r\n                    <Row gutter={0} align='middle'>\r\n                      <Col span={8}>\r\n                        <Divider margin={'0px !important'} />\r\n                      </Col>\r\n                      <Col justify='center' span={8}>\r\n                        <Paragraph fw={700} mb={0}>\r\n                          Per Marz\r\n                        </Paragraph>\r\n                      </Col>\r\n                      <Col span={8}>\r\n                        <Divider margin={'0px !important'} />\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  {Object.entries(separatedDataPerMarz).length\r\n                    ? Object.entries(separatedDataPerMarz).map(([key, value]) => (\r\n                        <div style={{ marginTop: 5 }} key={key}>\r\n                          <Paragraph\r\n                            width='100%'\r\n                            back_color={'rgb(136, 132, 216)'}\r\n                            align='center'\r\n                            padding='5px'\r\n                            color='white'\r\n                            radius='15px'\r\n                            mb={5}\r\n                          >\r\n                            {key}\r\n                          </Paragraph>\r\n                          <p\r\n                            style={{\r\n                              display: 'inline',\r\n                              whiteSpace: 'normal',\r\n                              overflowWrap: 'break-word',\r\n                            }}\r\n                          >\r\n                            {`${Object.entries(value)\r\n                              .filter(([k]) => k === 'dataResourcesWaterSources')\r\n                              .map(([, el]) => el)\r\n                              .join(',')}`}\r\n                          </p>\r\n                        </div>\r\n                      ))\r\n                    : ''}\r\n                </Col>\r\n                <Button onClick={() => exportData(globalBmoData, 'BMO')} margin={'32px 0 0 0'}>\r\n                  Export Data\r\n                </Button>\r\n              </Row>\r\n            </Col>\r\n          </Col>\r\n        </Row>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GuestDashboard;\r\n","import { useState } from 'react';\r\n\r\nconst useApiCall = (callFunc, countFunc, withoutLoading) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [count, setCount] = useState(null);\r\n\r\n  const handleApiCall = (params, callback = () => {}, callbackError = () => {}) => {\r\n    handleLoadingChange(true);\r\n    if (callFunc) {\r\n      callFunc(params)\r\n        .then(res => {\r\n          handleLoadingChange();\r\n          setData(res?.data || []);\r\n          callback(res?.data || []);\r\n        })\r\n        .catch(() => {\r\n          callbackError();\r\n          handleLoadingChange();\r\n        });\r\n    }\r\n    if (countFunc) {\r\n      countFunc(params)\r\n        .then(res => {\r\n          setCount(res?.data || 0);\r\n        })\r\n        .catch(() => {});\r\n    }\r\n  };\r\n\r\n  const handleLoadingChange = (value = false) => {\r\n    if (!withoutLoading) {\r\n      setLoading(value);\r\n    }\r\n  };\r\n\r\n  const setDefaultValues = () => {\r\n    setData([]);\r\n    setCount(0);\r\n  };\r\n\r\n  return [data, loading, handleApiCall, count, setDefaultValues, setData];\r\n};\r\n\r\nexport default useApiCall;\r\n"],"names":["ProvinceLabels","React","_ref","data","marzData","map","useMap","markers","useEffect","features","forEach","feature","center","centroid","lng","lat","geometry","coordinates","marker","L","icon","className","html","concat","properties","name","Math","round","dataWaterDischargeQuantity","dataWaterIntakeQuantity","dataResourcesWaterSourcesLength","addTo","current","push","removeLayer","_ref2","separatedDataPerMarz","m","get","_leaflet_id","_jsx","MapContainer","zoom","style","height","width","children","_jsxs","Suspense","TileLayer","url","attribution","GeoJSON","geojsonData","color","weight","fillOpacity","Title","Typography","totalQuantity","reduce","acc","item","listOfNames","Set","el","waterSource","totalKeyCount","key","filter","length","engMarz","Արագածոտն","Արարատ","Արմավիր","Գեղարքունիք","Երևան","Լոռի","Կոտայք","Շիրակ","Սյունիք","Տավուշ","engBMO","Ախուրյան","Արարատյան","Հարավային","Հյուսիսային","Հրազդան","Սևան","engBMOValues","Object","values","CustomTooltip","_payload$","_payload$$payload","_payload$2","_payload$2$payload","payload","detailedSource","value","GuestDashboard","marz","marzCall","setMarz","useApiCall","getMarz","permitsCall","getPermits","intakeDischargePointsCall","getIntakeDischargePoints","dataWaterIntakeCall","getDataWaterIntake","dataWaterDischargeCall","getDataWaterDischarge","bmo","bmoCall","setBmo","getBmo","separatedDataPerBMO","setSeparatedDataPerBMO","useState","globalBmoData","setGlobalBmoData","setSeparatedDataPerMarz","year","setYear","charLoading","setCharLoading","loading","setLoading","notConnected","setNotConnected","placesNames","i","allLoaded","bmoid","internal_id","prev","_objectSpread","permits","every","intakeDischargePoints","dataWaterIntake","dataWaterDischarge","bmoData","areAllFilled","keys","val","entries","dataResourcesWaterSources","TotalJrar","TotalJrarHeracum","totalPermits","allData","createdMarzData","_marz$i","_marz$i2","marz_Internal_ID","_ref3","exportData","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","href","download","click","disabledDate","isBefore","moment","isAfter","Spin","spinning","DatePicker","picker","onChange","e","format","defaultValue","mb","Row","gutter","Col","span","level","border_radius","padding","back_color","DashboardMap","Button","onClick","margin","DashboardCharts","lg","ResponsiveContainer","PieChart","Pie","_ref4","dataKey","cx","cy","outerRadius","fill","Tooltip","content","_ref5","innerRadius","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","align","Divider","justify","Paragraph","fw","_ref13","marginTop","radius","display","whiteSpace","overflowWrap","_ref14","k","_ref15","join","_ref16","_ref17","_ref18","callFunc","countFunc","withoutLoading","setData","count","setCount","handleLoadingChange","arguments","undefined","params","callback","callbackError","then","res","catch","setDefaultValues"],"sourceRoot":""}